create table IF NOT EXISTS users
(
    id       integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar(255) not null  unique,
    login    varchar(255) not null  unique,
    name     varchar(255),
    birthday date
    );

create table IF NOT EXISTS user_friends
(
    user_id   int,
    friend_id int,
    PRIMARY KEY (user_id , friend_id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users (id) ON DELETE CASCADE
    );

create table IF NOT EXISTS genres
(
    id    integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre varchar
);

create table IF NOT EXISTS ratings
(
    id     integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating varchar
);

create table IF NOT EXISTS films
(
    id           integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(255) not null,
    description  varchar,
    release_date date,
    duration     integer,
    rating_id    integer,
    FOREIGN KEY (rating_id) REFERENCES ratings (id) ON DELETE CASCADE
    );

create table IF NOT EXISTS film_likes
(
    film_id integer,
    user_id integer,
    PRIMARY KEY (film_id , user_id),
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    );

create table IF NOT EXISTS film_genres
(
    film_id  integer,
    genre_id integer,
    FOREIGN KEY (film_id) REFERENCES films (id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE CASCADE
    );

MERGE INTO genres AS target
    USING (SELECT 'Комедия' AS genre
           UNION ALL
           SELECT 'Драма'
           UNION ALL
           SELECT 'Мультфильм'
           UNION ALL
           SELECT 'Триллер'
           UNION ALL
           SELECT 'Документальный'
           UNION ALL
           SELECT 'Боевик') AS source
    ON target.genre = source.genre
    WHEN NOT MATCHED THEN
        INSERT (genre)
            VALUES (source.genre);


MERGE INTO ratings AS target
    USING (SELECT 'G' AS rating
           UNION ALL
           SELECT 'PG'
           UNION ALL
           SELECT 'PG-13'
           UNION ALL
           SELECT 'R'
           UNION ALL
           SELECT 'NC-17') AS source
    ON target.rating = source.rating
    WHEN NOT MATCHED THEN
        INSERT (rating)
            VALUES (source.rating);


